////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// Strings ////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

D_80000440   = 0x80000440; // type:asciz size:0xA segment:main
zlib_version = 0x80000474; // type:asciz size:0x3 segment:main
D_800007D0   = 0x800007D0; // type:asciz segment:main
D_80000A00   = 0x80000A00; // type:asciz segment:main
D_80000A3C   = 0x80000A3C; // type:asciz segment:main
D_80000A48   = 0x80000A48; // type:asciz segment:main
D_80000A54   = 0x80000A54; // type:asciz segment:main
D_80000A60   = 0x80000A60; // type:asciz segment:main
D_8003A8C0   = 0x8003A8C0; // type:asciz segment:main
D_8003AF60   = 0x8003AF60; // type:asciz segment:main
D_8003AF68   = 0x8003AF68; // type:asciz segment:main
D_8003AF74   = 0x8003AF74; // type:asciz segment:main
D_8003AF80   = 0x8003AF80; // type:asciz segment:main
D_8003AF8C   = 0x8003AF8C; // type:asciz segment:main
D_8003B404   = 0x8003B404; // type:asciz segment:main
D_8003B410   = 0x8003B410; // type:asciz segment:main
D_8003B414   = 0x8003B414; // type:asciz segment:main
D_8003B418   = 0x8003B418; // type:asciz segment:main
D_8003B420   = 0x8003B420; // type:asciz segment:main
D_8003B42C   = 0x8003B42C; // type:asciz segment:main
D_8003B438   = 0x8003B438; // type:asciz segment:main
D_8003B444   = 0x8003B444; // type:asciz segment:main
D_8003B450   = 0x8003B450; // type:asciz segment:main
D_8003B488   = 0x8003B488; // type:asciz segment:main
D_8003B494   = 0x8003B494; // type:asciz segment:main
D_8003B4DC   = 0x8003B4DC; // type:asciz segment:main
D_8003B514   = 0x8003B514; // type:asciz segment:main
D_8003B520   = 0x8003B520; // type:asciz segment:main
D_8003B588   = 0x8003B588; // type:asciz segment:main
D_8003B594   = 0x8003B594; // type:asciz segment:main
D_8003B5D4   = 0x8003B5D4; // type:asciz segment:main
D_8003B5E0   = 0x8003B5E0; // type:asciz segment:main
D_8003B618   = 0x8003B618; // type:asciz segment:main
D_8003B624   = 0x8003B624; // type:asciz segment:main
D_8003B65C   = 0x8003B65C; // type:asciz segment:main
D_8003B664   = 0x8003B664; // type:asciz segment:main
D_8003B7DC   = 0x8003B7DC; // type:asciz segment:main
D_8003B834   = 0x8003B834; // type:asciz segment:main
D_8003B8B0   = 0x8003B8B0; // type:asciz segment:main
D_8003B8E8   = 0x8003B8E8; // type:asciz segment:main
D_8003C2E0   = 0x8003C2E0; // type:asciz segment:main
D_8003C2E8   = 0x8003C2E8; // type:asciz segment:main
D_8003C2F0   = 0x8003C2F0; // type:asciz segment:main
D_8003C2F8   = 0x8003C2F8; // type:asciz segment:main
D_8003C300   = 0x8003C300; // type:asciz segment:main
D_8003C308   = 0x8003C308; // type:asciz segment:main
D_8003C310   = 0x8003C310; // type:asciz segment:main
D_8003C318   = 0x8003C318; // type:asciz segment:main
D_8003C320   = 0x8003C320; // type:asciz segment:main
D_8003C32C   = 0x8003C32C; // type:asciz segment:main
D_8003C338   = 0x8003C338; // type:asciz segment:main
D_8003C344   = 0x8003C344; // type:asciz segment:main
D_8003C350   = 0x8003C350; // type:asciz segment:main
D_8003C35C   = 0x8003C35C; // type:asciz segment:main
D_8003C368   = 0x8003C368; // type:asciz segment:main
D_8003C374   = 0x8003C374; // type:asciz segment:main
D_8003C380   = 0x8003C380; // type:asciz segment:main
D_8003C38C   = 0x8003C38C; // type:asciz segment:main
D_8003C398   = 0x8003C398; // type:asciz segment:main
D_8003C3A4   = 0x8003C3A4; // type:asciz segment:main
D_8003C3B0   = 0x8003C3B0; // type:asciz segment:main
D_8003C3BC   = 0x8003C3BC; // type:asciz segment:main
D_8003C3C8   = 0x8003C3C8; // type:asciz segment:main
D_8003C3D4   = 0x8003C3D4; // type:asciz segment:main
D_8003C3E0   = 0x8003C3E0; // type:asciz segment:main
D_8003C3EC   = 0x8003C3EC; // type:asciz segment:main
D_8003C3F8   = 0x8003C3F8; // type:asciz segment:main
D_8003C404   = 0x8003C404; // type:asciz segment:main
D_8003C410   = 0x8003C410; // type:asciz segment:main
D_8003C41C   = 0x8003C41C; // type:asciz segment:main
D_8003C428   = 0x8003C428; // type:asciz segment:main
D_8003C434   = 0x8003C434; // type:asciz segment:main
D_8003C440   = 0x8003C440; // type:asciz segment:main
D_8003C44C   = 0x8003C44C; // type:asciz segment:main
D_8003C458   = 0x8003C458; // type:asciz segment:main
D_8003C464   = 0x8003C464; // type:asciz segment:main
D_8003C470   = 0x8003C470; // type:asciz segment:main
D_8003C47C   = 0x8003C47C; // type:asciz segment:main
D_8003C488   = 0x8003C488; // type:asciz segment:main
D_8003C494   = 0x8003C494; // type:asciz segment:main
D_8003C4A0   = 0x8003C4A0; // type:asciz segment:main
D_8003C4AC   = 0x8003C4AC; // type:asciz segment:main
D_8003C4B4   = 0x8003C4B4; // type:asciz segment:main
D_8003C4C0   = 0x8003C4C0; // type:asciz segment:main
D_8003C4CC   = 0x8003C4CC; // type:asciz segment:main
D_8003C4D8   = 0x8003C4D8; // type:asciz segment:main
D_8003C4E4   = 0x8003C4E4; // type:asciz segment:main
D_8003C4F0   = 0x8003C4F0; // type:asciz segment:main
D_8003C4FC   = 0x8003C4FC; // type:asciz segment:main
D_8003C508   = 0x8003C508; // type:asciz segment:main
D_8003C514   = 0x8003C514; // type:asciz segment:main
D_8003C51C   = 0x8003C51C; // type:asciz segment:main
D_8003C528   = 0x8003C528; // type:asciz segment:main
D_8003C534   = 0x8003C534; // type:asciz segment:main
D_8003C540   = 0x8003C540; // type:asciz segment:main
D_8003C54C   = 0x8003C54C; // type:asciz segment:main
D_8003C558   = 0x8003C558; // type:asciz segment:main
D_8003C564   = 0x8003C564; // type:asciz segment:main
D_8003C570   = 0x8003C570; // type:asciz segment:main
D_8003C57C   = 0x8003C57C; // type:asciz segment:main
D_8003C588   = 0x8003C588; // type:asciz segment:main
D_8003C594   = 0x8003C594; // type:asciz segment:main
D_8003C5A0   = 0x8003C5A0; // type:asciz segment:main
D_8003C5AC   = 0x8003C5AC; // type:asciz segment:main
D_8003C5B4   = 0x8003C5B4; // type:asciz segment:main
D_8003C5BC   = 0x8003C5BC; // type:asciz segment:main
D_8003C5C4   = 0x8003C5C4; // type:asciz segment:main
D_8003C5D0   = 0x8003C5D0; // type:asciz segment:main
D_8003C5DC   = 0x8003C5DC; // type:asciz segment:main
D_8003C5E8   = 0x8003C5E8; // type:asciz segment:main
D_8003C5F4   = 0x8003C5F4; // type:asciz segment:main
D_8003C600   = 0x8003C600; // type:asciz segment:main
D_8003C60C   = 0x8003C60C; // type:asciz segment:main
D_8003C618   = 0x8003C618; // type:asciz segment:main
D_8003C624   = 0x8003C624; // type:asciz segment:main
D_8003C630   = 0x8003C630; // type:asciz segment:main
D_8003C63C   = 0x8003C63C; // type:asciz segment:main
D_8003C648   = 0x8003C648; // type:asciz segment:main
D_8003C654   = 0x8003C654; // type:asciz segment:main
D_8003C660   = 0x8003C660; // type:asciz segment:main
D_8003C66C   = 0x8003C66C; // type:asciz segment:main
D_8003C678   = 0x8003C678; // type:asciz segment:main
D_8003C684   = 0x8003C684; // type:asciz segment:main
D_8003C690   = 0x8003C690; // type:asciz segment:main
D_8003C69C   = 0x8003C69C; // type:asciz segment:main
D_8003C6A8   = 0x8003C6A8; // type:asciz segment:main
D_8003C6B4   = 0x8003C6B4; // type:asciz segment:main
D_8003C6C0   = 0x8003C6C0; // type:asciz segment:main
D_8003C6CC   = 0x8003C6CC; // type:asciz segment:main
D_8003C6D8   = 0x8003C6D8; // type:asciz segment:main
D_8003C6E4   = 0x8003C6E4; // type:asciz segment:main
D_8003C6F0   = 0x8003C6F0; // type:asciz segment:main
D_8003C6FC   = 0x8003C6FC; // type:asciz segment:main
D_8003C708   = 0x8003C708; // type:asciz segment:main
D_8003C714   = 0x8003C714; // type:asciz segment:main
D_8003C720   = 0x8003C720; // type:asciz segment:main
D_8003C790   = 0x8003C790; // type:asciz segment:main
D_8003C9B0   = 0x8003C9B0; // type:asciz size:0x16 segment:main
D_8003CB10   = 0x8003CB10; // type:asciz segment:main
D_8003CB14   = 0x8003CB14; // type:asciz segment:main
D_8003CB18   = 0x8003CB18; // type:asciz segment:main
D_8003CB1C   = 0x8003CB1C; // type:asciz segment:main
D_8003CB20   = 0x8003CB20; // type:asciz segment:main
D_8003CB24   = 0x8003CB24; // type:asciz segment:main
D_8003CB28   = 0x8003CB28; // type:asciz segment:main
D_8003CB2C   = 0x8003CB2C; // type:asciz segment:main
D_8003CB30   = 0x8003CB30; // type:asciz segment:main
D_8003CB34   = 0x8003CB34; // type:asciz segment:main
D_8003CBCC   = 0x8003CBCC; // type:asciz segment:main
D_8003CBD8   = 0x8003CBD8; // type:asciz segment:main
D_8003CBE4   = 0x8003CBE4; // type:asciz segment:main
D_8003CCD4   = 0x8003CCD4; // type:asciz segment:main
D_8003CCE0   = 0x8003CCE0; // type:asciz segment:main
D_8003CCEC   = 0x8003CCEC; // type:asciz segment:main
D_8003CCF8   = 0x8003CCF8; // type:asciz segment:main
D_8003CD04   = 0x8003CD04; // type:asciz segment:main
D_8003CD10   = 0x8003CD10; // type:asciz segment:main
D_8003CD1C   = 0x8003CD1C; // type:asciz segment:main
D_8003CD28   = 0x8003CD28; // type:asciz segment:main
D_8003CD34   = 0x8003CD34; // type:asciz segment:main
D_8003CD40   = 0x8003CD40; // type:asciz segment:main
D_8003CD48   = 0x8003CD48; // type:asciz segment:main
D_8003CD58   = 0x8003CD58; // type:asciz segment:main
D_8003CD64   = 0x8003CD64; // type:asciz segment:main
D_8003CD70   = 0x8003CD70; // type:asciz segment:main
D_8003CD7C   = 0x8003CD7C; // type:asciz segment:main
D_8003CD8C   = 0x8003CD8C; // type:asciz segment:main
D_8003CD98   = 0x8003CD98; // type:asciz segment:main
D_8003CDA4   = 0x8003CDA4; // type:asciz segment:main
D_8003CDB0   = 0x8003CDB0; // type:asciz segment:main
D_8003CDBC   = 0x8003CDBC; // type:asciz segment:main
D_8003CDC8   = 0x8003CDC8; // type:asciz segment:main
D_8003CDD4   = 0x8003CDD4; // type:asciz segment:main
D_8003CDE0   = 0x8003CDE0; // type:asciz segment:main
D_8003CDEC   = 0x8003CDEC; // type:asciz segment:main
D_8003CDF8   = 0x8003CDF8; // type:asciz segment:main
D_8003CE04   = 0x8003CE04; // type:asciz segment:main
D_8003CE10   = 0x8003CE10; // type:asciz segment:main
D_8003CE1C   = 0x8003CE1C; // type:asciz segment:main
D_8003CE28   = 0x8003CE28; // type:asciz segment:main
D_8003CE34   = 0x8003CE34; // type:asciz segment:main
D_8003CE40   = 0x8003CE40; // type:asciz segment:main
D_8003CE4C   = 0x8003CE4C; // type:asciz segment:main
D_8003CE58   = 0x8003CE58; // type:asciz segment:main
D_8003CE64   = 0x8003CE64; // type:asciz segment:main
D_8003CE70   = 0x8003CE70; // type:asciz segment:main
D_8003CE7C   = 0x8003CE7C; // type:asciz segment:main
D_8003CE88   = 0x8003CE88; // type:asciz segment:main
D_8003CE90   = 0x8003CE90; // type:asciz segment:main
D_8003CE9C   = 0x8003CE9C; // type:asciz segment:main
D_8003CEA8   = 0x8003CEA8; // type:asciz segment:main
D_8003D374   = 0x8003D374; // type:asciz segment:main
D_8003D624   = 0x8003D624; // type:asciz size:0xB segment:main
D_8003D630   = 0x8003D630; // type:asciz segment:main
D_8003D63C   = 0x8003D63C; // type:asciz segment:main
D_8003D648   = 0x8003D648; // type:asciz segment:main
D_8003D654   = 0x8003D654; // type:asciz segment:main
D_8003D660   = 0x8003D660; // type:asciz segment:main

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////// Functions ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

decrypt_ns_hmt                   = 0x8006AFC0; // type:func segment:main
find_manifest_entry              = 0x80003A0C; // type:func segment:main
full_header_image_offset_convert = 0x80055488; // type:func segment:main
get_asset_size_extra             = 0x80004D5C; // type:func segment:main
get_asset_size_simple            = 0x80005134; // type:func segment:main
getControllerSettingsTitle       = 0x800C49BC; // type:func segment:main
getGameOrFrontText               = 0x8005589C; // type:func segment:main
getPlayerHealthPercentage        = 0x800C40AC; // type:func segment:main
load_asset                       = 0x8006488C; // type:func segment:main
load_asset_with_malloc_flags     = 0x800647E0; // type:func segment:main
load_dat_file_assets             = 0x80064940; // type:func segment:main
load_full_header_image           = 0x800543F4; // type:func segment:main
load_hmt_and_hob                 = 0x8005645C; // type:func segment:main
load_level_dat                   = 0x80046784; // type:func segment:main
load_level_hmp                   = 0x80043D74; // type:func segment:main
load_naboo_starfighter           = 0x8006C780; // type:func segment:main
make_crc32_lut                   = 0x80082544; // type:func segment:main
model_animation_offset_convert   = 0x80082BD0; // type:func segment:main
rs_crc32                         = 0x800824F8; // type:func segment:main
rs_free                          = 0x80001C98; // type:func segment:main
rs_malloc                        = 0x80001ACC; // type:func segment:main
rs_memset                        = 0x800078E0; // type:func segment:main
rs_strcat                        = 0x8000767C; // type:func segment:main
rs_strcmp                        = 0x800076F8; // type:func segment:main
rs_strcpy                        = 0x8000761C; // type:func segment:main
rs_strncat                       = 0x800076B8; // type:func segment:main
rs_strncmp                       = 0x800077A8; // type:func segment:main
rs_strncpy                       = 0x80007640; // type:func segment:main

// The zcalloc and zcfree functions are effectively just wrappers for these functions
rs_zcalloc                      = 0x8000527C; // type:func segment:main
rs_zcfree                       = 0x8000525C; // type:func segment:main

// Real functions missed by splat

func_80002F4C = 0x80002F4C; // type:func segment:main
func_800045E8 = 0x800045E8; // type:func segment:main
func_8000569C = 0x8000569C; // type:func segment:main
func_80018E60 = 0x80018E60; // type:func segment:main
func_800403EC = 0x800403EC; // type:func segment:main
func_8006F388 = 0x8006F388; // type:func segment:main
func_800927B0 = 0x800927B0; // type:func segment:main
func_80092A54 = 0x80092A54; // type:func segment:main
.L80092C6C    = 0x80092C6C; // type:label segment:main
func_80092CF0 = 0x80092CF0; // type:func segment:main
func_80092F94 = 0x80092F94; // type:func segment:main

// Fake Function Fixing

fake_func_800027B8 = 0x800027B8; // type:func segment:main
func_800027C0      = 0x800027C0; // type:func segment:main

fake_func_8000337C = 0x8000337C; // type:func segment:main
func_80003380      = 0x80003380; // type:func segment:main

fake_func_80003424 = 0x80003424; // type:func segment:main
func_80003430      = 0x80003430; // type:func segment:main

fake_func_80003474 = 0x80003474; // type:func segment:main
func_80003480      = 0x80003480; // type:func segment:main

// Annoyingly the fake function here, when interpreted as real coode, contains a reference
// to func_80007064 which isn't real. This causes a real function (func_8000703C) to get
// split in two
fake_func_8000537C = 0x8000537C; // type:func segment:main
func_80005380      = 0x80005380; // type:func segment:main

fake_func_80005568 = 0x80005568; // type:func segment:main
func_80005570      = 0x80005570; // type:func segment:main

fake_func_8000595C = 0x8000595C; // type:func segment:main
func_80005960      = 0x80005960; // type:func segment:main

fake_func_80006BFC = 0x80006BFC; // type:func segment:main
func_80006C00      = 0x80006C00; // type:func segment:main

fake_func_8000737C = 0x8000737C; // type:func segment:main
func_80007380      = 0x80007380; // type:func segment:main

fake_func_800074D8 = 0x800074D8; // type:func segment:main
func_800074E0      = 0x800074E0; // type:func segment:main

fake_func_80007908 = 0x80007908; // type:func segment:main
func_80007910      = 0x80007910; // type:func segment:main

fake_func_800186D8 = 0x800186D8; // type:func segment:main

fake_func_80019808 = 0x80019808; // type:func segment:main
func_80019810      = 0x80019810; // type:func segment:main

fake_func_80024878 = 0x80024878; // type:func segment:main
func_8001C400      = 0x8001C400; // type:func segment:main

fake_func_8001C3FC = 0x8001C3FC; // type:func segment:main
func_80024880      = 0x80024880; // type:func segment:main

fake_func_80024A0C = 0x80024A0C; // type:func segment:main
// No accompanying "real" function

fake_func_8003DF98 = 0x8003DF98; // type:func segment:main
func_8003DFA0      = 0x8003DFA0; // type:func segment:main

fake_func_80040304 = 0x80040304; // type:func segment:main
func_80040310      = 0x80040310; // type:func segment:main

fake_func_80041EEC = 0x80041EEC; // type:func segment:main
func_80041EF0      = 0x80041EF0; // type:func segment:main

fake_func_800457CC = 0x800457CC; // type:func segment:main
func_800457D0      = 0x800457D0; // type:func segment:main

fake_func_8004661C = 0x8004661C; // type:func segment:main
func_80046620      = 0x80046620; // type:func segment:main

fake_func_800496F4 = 0x800496F4; // type:func segment:main
func_80049700      = 0x80049700; // type:func segment:main

fake_func_8004CCF8 = 0x8004CCF8; // type:func segment:main
func_8004CD00      = 0x8004CD00; // type:func segment:main

fake_func_800538AC = 0x800538AC; // type:func segment:main
func_800538B0      = 0x800538B0; // type:func segment:main

fake_func_80054648 = 0x80054648; // type:func segment:main
func_80054650      = 0x80054650; // type:func segment:main

fake_func_800555E8 = 0x800555E8; // type:func segment:main
func_800555F0      = 0x800555F0; // type:func segment:main

fake_func_80055698 = 0x80055698; // type:func segment:main
func_800556A0      = 0x800556A0; // type:func segment:main

fake_func_80055A2C = 0x80055A2C; // type:func segment:main
func_80055A30      = 0x80055A30; // type:func segment:main

fake_func_80059B4C = 0x80059B4C; // type:func segment:main
func_80059B50      = 0x80059B50; // type:func segment:main

fake_func_8005A11C = 0x8005A11C; // type:func segment:main
func_8005A120      = 0x8005A120; // type:func segment:main

fake_func_8005C61C = 0x8005C61C; // type:func segment:main
func_8005C620      = 0x8005C620; // type:func segment:main

fake_func_8005EE64 = 0x8005EE64; // type:func segment:main
func_8005EE70      = 0x8005EE70; // type:func segment:main

fake_func_800613B8 = 0x800613B8; // type:func segment:main
func_800613C0      = 0x800613C0; // type:func segment:main

fake_func_80064294 = 0x80064294; // type:func segment:main
func_800642A0      = 0x800642A0; // type:func segment:main

fake_func_80064934 = 0x80064934; // type:func segment:main
// Accompanying real function is load_dat_file_assets

fake_func_80065A5C = 0x80065A5C; // type:func segment:main
func_80065A60      = 0x80065A60; // type:func segment:main

fake_func_800663AC = 0x800663AC; // type:func segment:main
func_800663B0      = 0x800663B0; // type:func segment:main

fake_func_80069AEC = 0x80069AEC; // type:func segment:main
func_80069AF0      = 0x80069AF0; // type:func segment:main

fake_func_8006ACA4 = 0x8006ACA4; // type:func segment:main
func_8006ACB0      = 0x8006ACB0; // type:func segment:main

// fake_func_8006AE48 = 0x8006AE48; // type:func segment:main
func_8006AE58      = 0x8006AE58; // type:func segment:main

fake_func_8006B704 = 0x8006B704; // type:func segment:main
func_8006B710      = 0x8006B710; // type:func segment:main

fake_func_8006D8FC = 0x8006D8FC; // type:func segment:main
func_8006D900      = 0x8006D900; // type:func segment:main

fake_func_8006F4AC = 0x8006F4AC; // type:func segment:main
func_8006F4B0      = 0x8006F4B0; // type:func segment:main

fake_func_80072CE8 = 0x80072CE8; // type:func segment:main
func_80072CF0      = 0x80072CF0; // type:func segment:main

fake_func_80079278 = 0x80079278; // type:func segment:main
func_80079280      = 0x80079280; // type:func segment:main

fake_func_80079CD8 = 0x80079CD8; // type:func segment:main
func_80079CE0      = 0x80079CE0; // type:func segment:main

fake_func_8007A0E8 = 0x8007A0E8; // type:func segment:main
func_8007A0F0      = 0x8007A0F0; // type:func segment:main

fake_func_8007A86C = 0x8007A86C; // type:func segment:main
func_8007A870      = 0x8007A870; // type:func segment:main

fake_func_8007C298 = 0x8007C298; // type:func segment:main
func_8007C2A0      = 0x8007C2A0; // type:func segment:main

fake_func_80082268 = 0x80082268; // type:func segment:main
func_80082270      = 0x80082270; // type:func segment:main

fake_func_800825C8 = 0x800825C8; // type:func segment:main
// No accompanying "real" function

fake_func_80093E74 = 0x80093E74; // type:func segment:main
func_80093E80      = 0x80093E80; // type:func segment:main

fake_func_80094348 = 0x80094348; // type:func segment:main
func_80094350      = 0x80094350; // type:func segment:main

fake_func_8009711C = 0x8009711C; // type:func segment:main
func_80097120      = 0x80097120; // type:func segment:main

fake_func_80097D58 = 0x80097D58; // type:func segment:main
func_80097D60      = 0x80097D60; // type:func segment:main

fake_func_80099C4C = 0x80099C4C; // type:func segment:main
func_80099C50      = 0x80099C50; // type:func segment:main

fake_func_80099FDC = 0x80099FDC; // type:func segment:main
// No accompanying "real" function

fake_func_8009D7CC = 0x8009D7CC; // type:func segment:main
func_8009D7D0      = 0x8009D7D0; // type:func segment:main

fake_func_8009C2C8 = 0x8009C2C8; // type:func segment:main
func_8009C2D0      = 0x8009C2D0; // type:func segment:main

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////// Varibales ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

D_80000550 = 0x80000550; // type:f32 segment:main
D_800005A0 = 0x800005A0; // type:f64 segment:main
D_800007DC = 0x800007DC; // type:f32 segment:main
D_800186E0 = 0x800186E0; // type:f32 segment:main
D_80037560 = 0x80037560; // size:0x50 segment:main

D_8009DDD0 = 0x8009DDD0; // type:u32 size:0x24 segment:main
D_8009DDF4 = 0x8009DDF4; // type:u32 size:0x24 segment:main
D_8009DE18 = 0x8009DE18; // type:u32 size:0x24 segment:main
D_8009DE3C = 0x8009DE3C; // type:u32 size:0x24 segment:main
D_8009DE60 = 0x8009DE60; // type:u32 segment:main

// I believe this is related to the various fonts found in the game
// The sizes are very strange, but I think they're correct
D_8009ED90 = 0x8009ED90; // type:u32 size:0x104 segment:main
D_8009EE94 = 0x8009EE94; // type:u32 size:0x13C segment:main
D_8009EFD0 = 0x8009EFD0; // type:u32 size:0x104 segment:main
D_8009F0D4 = 0x8009F0D4; // type:u32 size:0x13C segment:main
D_8009F210 = 0x8009F210; // type:u32 size:0x104 segment:main
D_8009F314 = 0x8009F314; // type:u32 size:0x16C segment:main
D_8009F480 = 0x8009F480; // type:u32 size:0x138 segment:main
D_8009F5B8 = 0x8009F5B8; // type:u32 size:0x138 segment:main
D_8009F6F0 = 0x8009F6F0; // type:u32 size:0x138 segment:main
D_8009F828 = 0x8009F828; // type:u32 size:0x138 segment:main
D_8009F960 = 0x8009F960; // type:u32 size:0x15C segment:main
D_8009FABC = 0x8009FABC; // type:u32 size:0x154 segment:main

D_800A0D9C = 0x800A0D9C; // type:u32 size:0x3C segment:main
D_800A0DD8 = 0x800A0DD8; // type:u32 size:0x3C segment:main
D_800A0E14 = 0x800A0E14; // type:u32 size:0x3C segment:main
D_800A0E50 = 0x800A0E50; // type:u32 size:0x3C segment:main
D_800A0E8C = 0x800A0E8C; // type:u32 size:0x3C segment:main

D_800A1790 = 0x800A1790; // type:u16 segment:main
D_800A1990 = 0x800A1990; // type:s32 segment:main
D_800A2FD0 = 0x800A2FD0; // type:u32 segment:main
D_800A31D0 = 0x800A31D0; // type:u32 segment:main
D_800A33D0 = 0x800A33D0; // type:u32 size:0xC04 segment:main
D_800A3FD4 = 0x800A3FD4; // type:u32 size:0xC04 segment:main
D_800A4BD8 = 0x800A4BD8; // type:f32 size:0x200 segment:main
D_800A4DD8 = 0x800A4DD8; // type:f32 segment:main

gspTask = 0x800377C8; // type:OSTask size:0x40 segment:main
aspTask = 0x80149470; // type:OSTask size:0x40 segment:main

rspbootTextStart = 0x800825D0; // size:0xD0 name_end:rspbootTextEnd segment:main

aspMainTextStart = 0x80099FE0; // size:0xF80 name_end:aspMainTextEnd segment:main
aspMainDataStart = 0x800A4E00; // size:0x320 name_end:aspMainDataEnd segment:main

gspF3DEXTextStart = 0x80024A10; // size:0x1FA0 name_end:gspF3DEXTextEnd segment:main
gspF3DEXDataStart = 0x80038D00; // size:0x100  name_end:gspF3DEXDataEnd segment:main

////////////////////////////////////////////////////////////////////////////////
///////////////////////////////// Jump Tables //////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

jtbl_80000480 = 0x80000480; // type:jtbl segment:main
jtbl_80000500 = 0x80000500; // type:jtbl segment:main
jtbl_800008B8 = 0x800008B8; // type:jtbl segment:main
jtbl_80000990 = 0x80000990; // type:jtbl segment:main

////////////////////////////////////////////////////////////////////////////////
///////////////////////////// File Split Garbage ///////////////////////////////
////////////////////////////////////////////////////////////////////////////////

junk_8000044A = 0x8000044A; // type:u8 segment:main
junk_80000458 = 0x80000458; // type:u8 segment:main
junk_80000464 = 0x80000464; // type:u8 segment:main
junk_80000477 = 0x80000477; // type:u8 segment:main
junk_800007E8 = 0x800007E8; // type:u8 segment:main
junk_8000080C = 0x8000080C; // type:u8 segment:main
junk_80000988 = 0x80000988; // type:u8 segment:main
junk_800009F4 = 0x800009F4; // type:u8 segment:main
junk_80000A6C = 0x80000A6C; // type:u8 segment:main
junk_8003A4C8 = 0x8003A4C8; // type:u8 segment:main
junk_8003A608 = 0x8003A608; // type:u8 segment:main
junk_8003A7DC = 0x8003A7DC; // type:u8 segment:main
junk_8003A814 = 0x8003A814; // type:u8 segment:main
junk_8003A8B8 = 0x8003A8B8; // type:u8 segment:main
junk_8003ABD4 = 0x8003ABD4; // type:u8 segment:main
junk_8003AD18 = 0x8003AD18; // type:u8 segment:main
junk_8003ADBC = 0x8003ADBC; // type:u8 segment:main
junk_8003B2F8 = 0x8003B2F8; // type:u8 segment:main
junk_8003B40C = 0x8003B40C; // type:u8 segment:main
junk_8003B82C = 0x8003B82C; // type:u8 segment:main
junk_8003C25C = 0x8003C25C; // type:u8 segment:main
junk_8003C2D4 = 0x8003C2D4; // type:u8 segment:main
junk_8003C7C8 = 0x8003C7C8; // type:u8 segment:main
junk_8003C8C8 = 0x8003C8C8; // type:u8 segment:main
junk_8003C8FC = 0x8003C8FC; // type:u8 segment:main
junk_8003C958 = 0x8003C958; // type:u8 segment:main
junk_8003C9C6 = 0x8003C9C6; // type:u8 segment:main
junk_8003CAE8 = 0x8003CAE8; // type:u8 segment:main
junk_8003CEE4 = 0x8003CEE4; // type:u8 segment:main
junk_8003D4F8 = 0x8003D4F8; // type:u8 segment:main
junk_8003D62F = 0x8003D62F; // type:u8 segment:main
junk_8003DE64 = 0x8003DE64; // type:u8 segment:main
junk_8003DEE4 = 0x8003DEE4; // type:u8 segment:main
junk_8003DEF4 = 0x8003DEF4; // type:u8 segment:main
junk_8009DEB8 = 0x8009DEB8; // type:u8 segment:main
junk_8009DEC4 = 0x8009DEC4; // type:u8 segment:main
junk_8009DED4 = 0x8009DED4; // type:u8 segment:main
junk_800A05CC = 0x800A05CC; // type:u8 segment:main
junk_800A0A8C = 0x800A0A8C; // type:u8 segment:main
junk_800A0EC8 = 0x800A0EC8; // type:u8 segment:main
junk_800A1784 = 0x800A1784; // type:u8 segment:main
