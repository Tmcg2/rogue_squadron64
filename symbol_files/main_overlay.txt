////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// Strings ////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

D_80000440   = 0x80000440; // type:asciz size:0xA
zlib_version = 0x80000474; // type:asciz size:0x3
D_800007D0   = 0x800007D0; // type:asciz
D_80000A00   = 0x80000A00; // type:asciz
D_80000A3C   = 0x80000A3C; // type:asciz
D_80000A48   = 0x80000A48; // type:asciz
D_80000A54   = 0x80000A54; // type:asciz
D_80000A60   = 0x80000A60; // type:asciz size:0xC
D_80038CF0   = 0x80038CF0; // type:char* size:0x4
D_8003A8C0   = 0x8003A8C0; // type:asciz
D_8003AF60   = 0x8003AF60; // type:asciz
D_8003AF68   = 0x8003AF68; // type:asciz
D_8003AF74   = 0x8003AF74; // type:asciz
D_8003AF80   = 0x8003AF80; // type:asciz
D_8003AF8C   = 0x8003AF8C; // type:asciz
D_8003B404   = 0x8003B404; // type:asciz size:0xC
D_8003B410   = 0x8003B410; // type:asciz
D_8003B414   = 0x8003B414; // type:asciz
D_8003B418   = 0x8003B418; // type:asciz
D_8003B420   = 0x8003B420; // type:asciz
D_8003B42C   = 0x8003B42C; // type:asciz
D_8003B438   = 0x8003B438; // type:asciz
D_8003B444   = 0x8003B444; // type:asciz
D_8003B450   = 0x8003B450; // type:asciz
D_8003B488   = 0x8003B488; // type:asciz
D_8003B494   = 0x8003B494; // type:asciz
D_8003B4DC   = 0x8003B4DC; // type:asciz
D_8003B514   = 0x8003B514; // type:asciz
D_8003B520   = 0x8003B520; // type:asciz
D_8003B588   = 0x8003B588; // type:asciz
D_8003B594   = 0x8003B594; // type:asciz
D_8003B5D4   = 0x8003B5D4; // type:asciz
D_8003B5E0   = 0x8003B5E0; // type:asciz
D_8003B618   = 0x8003B618; // type:asciz
D_8003B624   = 0x8003B624; // type:asciz
D_8003B65C   = 0x8003B65C; // type:asciz
D_8003B664   = 0x8003B664; // type:asciz
D_8003B7DC   = 0x8003B7DC; // type:asciz
D_8003B834   = 0x8003B834; // type:asciz
D_8003B8B0   = 0x8003B8B0; // type:asciz
D_8003B8E8   = 0x8003B8E8; // type:asciz
D_8003C2E0   = 0x8003C2E0; // type:asciz
D_8003C2E8   = 0x8003C2E8; // type:asciz
D_8003C2F0   = 0x8003C2F0; // type:asciz
D_8003C2F8   = 0x8003C2F8; // type:asciz
D_8003C300   = 0x8003C300; // type:asciz
D_8003C308   = 0x8003C308; // type:asciz
D_8003C310   = 0x8003C310; // type:asciz
D_8003C318   = 0x8003C318; // type:asciz
D_8003C320   = 0x8003C320; // type:asciz
D_8003C32C   = 0x8003C32C; // type:asciz
D_8003C338   = 0x8003C338; // type:asciz
D_8003C344   = 0x8003C344; // type:asciz
D_8003C350   = 0x8003C350; // type:asciz
D_8003C35C   = 0x8003C35C; // type:asciz
D_8003C368   = 0x8003C368; // type:asciz
D_8003C374   = 0x8003C374; // type:asciz
D_8003C380   = 0x8003C380; // type:asciz
D_8003C38C   = 0x8003C38C; // type:asciz
D_8003C398   = 0x8003C398; // type:asciz
D_8003C3A4   = 0x8003C3A4; // type:asciz
D_8003C3B0   = 0x8003C3B0; // type:asciz
D_8003C3BC   = 0x8003C3BC; // type:asciz
D_8003C3C8   = 0x8003C3C8; // type:asciz
D_8003C3D4   = 0x8003C3D4; // type:asciz
D_8003C3E0   = 0x8003C3E0; // type:asciz
D_8003C3EC   = 0x8003C3EC; // type:asciz
D_8003C3F8   = 0x8003C3F8; // type:asciz
D_8003C404   = 0x8003C404; // type:asciz
D_8003C410   = 0x8003C410; // type:asciz
D_8003C41C   = 0x8003C41C; // type:asciz
D_8003C428   = 0x8003C428; // type:asciz
D_8003C434   = 0x8003C434; // type:asciz
D_8003C440   = 0x8003C440; // type:asciz
D_8003C44C   = 0x8003C44C; // type:asciz
D_8003C458   = 0x8003C458; // type:asciz
D_8003C464   = 0x8003C464; // type:asciz
D_8003C470   = 0x8003C470; // type:asciz
D_8003C47C   = 0x8003C47C; // type:asciz
D_8003C488   = 0x8003C488; // type:asciz
D_8003C494   = 0x8003C494; // type:asciz
D_8003C4A0   = 0x8003C4A0; // type:asciz
D_8003C4AC   = 0x8003C4AC; // type:asciz
D_8003C4B4   = 0x8003C4B4; // type:asciz
D_8003C4C0   = 0x8003C4C0; // type:asciz
D_8003C4CC   = 0x8003C4CC; // type:asciz
D_8003C4D8   = 0x8003C4D8; // type:asciz
D_8003C4E4   = 0x8003C4E4; // type:asciz
D_8003C4F0   = 0x8003C4F0; // type:asciz
D_8003C4FC   = 0x8003C4FC; // type:asciz
D_8003C508   = 0x8003C508; // type:asciz
D_8003C514   = 0x8003C514; // type:asciz
D_8003C51C   = 0x8003C51C; // type:asciz
D_8003C528   = 0x8003C528; // type:asciz
D_8003C534   = 0x8003C534; // type:asciz
D_8003C540   = 0x8003C540; // type:asciz
D_8003C54C   = 0x8003C54C; // type:asciz
D_8003C558   = 0x8003C558; // type:asciz
D_8003C564   = 0x8003C564; // type:asciz
D_8003C570   = 0x8003C570; // type:asciz
D_8003C57C   = 0x8003C57C; // type:asciz
D_8003C588   = 0x8003C588; // type:asciz
D_8003C594   = 0x8003C594; // type:asciz
D_8003C5A0   = 0x8003C5A0; // type:asciz
D_8003C5AC   = 0x8003C5AC; // type:asciz
D_8003C5B4   = 0x8003C5B4; // type:asciz
D_8003C5BC   = 0x8003C5BC; // type:asciz
D_8003C5C4   = 0x8003C5C4; // type:asciz
D_8003C5D0   = 0x8003C5D0; // type:asciz
D_8003C5DC   = 0x8003C5DC; // type:asciz
D_8003C5E8   = 0x8003C5E8; // type:asciz
D_8003C5F4   = 0x8003C5F4; // type:asciz
D_8003C600   = 0x8003C600; // type:asciz
D_8003C60C   = 0x8003C60C; // type:asciz
D_8003C618   = 0x8003C618; // type:asciz
D_8003C624   = 0x8003C624; // type:asciz
D_8003C630   = 0x8003C630; // type:asciz
D_8003C63C   = 0x8003C63C; // type:asciz
D_8003C648   = 0x8003C648; // type:asciz
D_8003C654   = 0x8003C654; // type:asciz
D_8003C660   = 0x8003C660; // type:asciz
D_8003C66C   = 0x8003C66C; // type:asciz
D_8003C678   = 0x8003C678; // type:asciz
D_8003C684   = 0x8003C684; // type:asciz
D_8003C690   = 0x8003C690; // type:asciz
D_8003C69C   = 0x8003C69C; // type:asciz
D_8003C6A8   = 0x8003C6A8; // type:asciz
D_8003C6B4   = 0x8003C6B4; // type:asciz
D_8003C6C0   = 0x8003C6C0; // type:asciz
D_8003C6CC   = 0x8003C6CC; // type:asciz
D_8003C6D8   = 0x8003C6D8; // type:asciz
D_8003C6E4   = 0x8003C6E4; // type:asciz
D_8003C6F0   = 0x8003C6F0; // type:asciz
D_8003C6FC   = 0x8003C6FC; // type:asciz
D_8003C708   = 0x8003C708; // type:asciz
D_8003C714   = 0x8003C714; // type:asciz
D_8003C720   = 0x8003C720; // type:asciz
D_8003C790   = 0x8003C790; // type:asciz
D_8003C9B0   = 0x8003C9B0; // type:asciz size:0x16
D_8003CB10   = 0x8003CB10; // type:asciz
D_8003CB14   = 0x8003CB14; // type:asciz
D_8003CB18   = 0x8003CB18; // type:asciz
D_8003CB1C   = 0x8003CB1C; // type:asciz
D_8003CB20   = 0x8003CB20; // type:asciz
D_8003CB24   = 0x8003CB24; // type:asciz
D_8003CB28   = 0x8003CB28; // type:asciz
D_8003CB2C   = 0x8003CB2C; // type:asciz
D_8003CB30   = 0x8003CB30; // type:asciz
D_8003CB34   = 0x8003CB34; // type:asciz
D_8003CBCC   = 0x8003CBCC; // type:asciz
D_8003CBD8   = 0x8003CBD8; // type:asciz
D_8003CBE4   = 0x8003CBE4; // type:asciz
D_8003CCD4   = 0x8003CCD4; // type:asciz
D_8003CCE0   = 0x8003CCE0; // type:asciz
D_8003CCEC   = 0x8003CCEC; // type:asciz
D_8003CCF8   = 0x8003CCF8; // type:asciz
D_8003CD04   = 0x8003CD04; // type:asciz
D_8003CD10   = 0x8003CD10; // type:asciz
D_8003CD1C   = 0x8003CD1C; // type:asciz
D_8003CD28   = 0x8003CD28; // type:asciz
D_8003CD34   = 0x8003CD34; // type:asciz
D_8003CD40   = 0x8003CD40; // type:asciz
D_8003CD48   = 0x8003CD48; // type:asciz
D_8003CD58   = 0x8003CD58; // type:asciz
D_8003CD64   = 0x8003CD64; // type:asciz
D_8003CD70   = 0x8003CD70; // type:asciz
D_8003CD7C   = 0x8003CD7C; // type:asciz
D_8003CD8C   = 0x8003CD8C; // type:asciz
D_8003CD98   = 0x8003CD98; // type:asciz
D_8003CDA4   = 0x8003CDA4; // type:asciz
D_8003CDB0   = 0x8003CDB0; // type:asciz
D_8003CDBC   = 0x8003CDBC; // type:asciz
D_8003CDC8   = 0x8003CDC8; // type:asciz
D_8003CDD4   = 0x8003CDD4; // type:asciz
D_8003CDE0   = 0x8003CDE0; // type:asciz
D_8003CDEC   = 0x8003CDEC; // type:asciz
D_8003CDF8   = 0x8003CDF8; // type:asciz
D_8003CE04   = 0x8003CE04; // type:asciz
D_8003CE10   = 0x8003CE10; // type:asciz
D_8003CE1C   = 0x8003CE1C; // type:asciz
D_8003CE28   = 0x8003CE28; // type:asciz
D_8003CE34   = 0x8003CE34; // type:asciz
D_8003CE40   = 0x8003CE40; // type:asciz
D_8003CE4C   = 0x8003CE4C; // type:asciz
D_8003CE58   = 0x8003CE58; // type:asciz
D_8003CE64   = 0x8003CE64; // type:asciz
D_8003CE70   = 0x8003CE70; // type:asciz
D_8003CE7C   = 0x8003CE7C; // type:asciz
D_8003CE88   = 0x8003CE88; // type:asciz
D_8003CE90   = 0x8003CE90; // type:asciz
D_8003CE9C   = 0x8003CE9C; // type:asciz
D_8003CEA8   = 0x8003CEA8; // type:asciz
D_8003D374   = 0x8003D374; // type:asciz
D_8003D624   = 0x8003D624; // type:asciz size:0xB
D_8003D630   = 0x8003D630; // type:asciz
D_8003D63C   = 0x8003D63C; // type:asciz
D_8003D648   = 0x8003D648; // type:asciz
D_8003D654   = 0x8003D654; // type:asciz
D_8003D660   = 0x8003D660; // type:asciz

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////// Functions ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

thread3_video_handle                 = 0x80001088; // defined:true
main                                 = 0x8000161C; // defined:true
idle_thread_handle                   = 0x800017A0; // defined:true
rs_malloc                            = 0x80001ACC; // defined:true
rs_free                              = 0x80001C98; // defined:true
setViModeType                        = 0x8000274C; // defined:true
getOsResetType                       = 0x800027A8; // defined:true
rand                                 = 0x80003430; // defined:true
find_manifest_entry                  = 0x80003A0C; // defined:true
get_asset_size_extra                 = 0x80004D5C; // defined:true
get_asset_size_simple                = 0x80005134; // defined:true
// The zcfree and zcalloc functions are effectively just wrappers for these functions
rs_zcfree                            = 0x8000525C; // defined:true
rs_zcalloc                           = 0x8000527C; // defined:true
rs_strcpy                            = 0x8000761C; // defined:true
rs_strncpy                           = 0x80007640; // defined:true
rs_strcat                            = 0x8000767C; // defined:true
rs_strncat                           = 0x800076B8; // defined:true
rs_strcmp                            = 0x800076F8; // defined:true
rs_strncmp                           = 0x800077A8; // defined:true
rs_memset                            = 0x800078E0; // defined:true
load_level_hmp                       = 0x80043D74; // defined:true
loadDatFile                          = 0x80046784; // defined:true
getLevelDatItemByName                = 0x80047B48; // defined:true
getDatItemByName                     = 0x80047B70; // defined:true
load_full_header_image               = 0x800543F4; // defined:true
full_header_image_offset_convert     = 0x80055488; // defined:true
loadTxtFile                          = 0x800556A0; // defined:true
loadGameOrFrontTxtFile               = 0x80055880; // defined:true
getGameOrFrontText                   = 0x8005589C; // defined:true
freeTxtFile                          = 0x800558D4; // defined:true
getVoiceText                         = 0x80055978; // defined:true
loadVoiceTxtFile                     = 0x80055A20; // defined:true
load_hmt_and_hob                     = 0x8005645C; // defined:true
isHobObjectLoaded                    = 0x80056DA4; // defined:true
getHobObjectByName                   = 0x80057B4C; // defined:true
freeAllHobFiles                      = 0x800591D4; // defined:true
load_asset_with_malloc_flags         = 0x800647E0; // defined:true
load_asset                           = 0x8006488C; // defined:true
load_dat_file_assets                 = 0x80064940; // defined:true
datItemSetObjectiveBooleanCount      = 0x80065914; // defined:true
decrypt_ns_hmt                       = 0x8006AFC0; // defined:true
load_naboo_starfighter               = 0x8006C780; // defined:true
getPlayerVehicleId                   = 0x8006C940; // defined:true
generateUnlockString                 = 0x8006E638; // defined:true
initializeNumLives                   = 0x8006EA78; // defined:true
gatherActiveUnlockFlags              = 0x8006EDB8; // defined:true
unlockMissleUpgradeOnLevelCompletion = 0x8006EE14; // defined:true
getControllerNewButtonsPressed       = 0x80079F50; // defined:true
rs_crc32                             = 0x800824F8; // defined:true
make_crc32_lut                       = 0x80082544; // defined:true
model_animation_offset_convert       = 0x80082BD0; // defined:true
loadSpeechFile                       = 0x8009BA38; // defined:true

// Real functions missed by splat

func_80002F4C = 0x80002F4C; // defined:true
func_800045E8 = 0x800045E8; // defined:true
func_8000569C = 0x8000569C; // defined:true
func_80018E60 = 0x80018E60; // defined:true
func_800403EC = 0x800403EC; // defined:true
func_8006F388 = 0x8006F388; // defined:true
func_800927B0 = 0x800927B0; // defined:true
func_80092A54 = 0x80092A54; // defined:true
.L80092C6C    = 0x80092C6C; // type:label
func_80092CF0 = 0x80092CF0; // defined:true
func_80092F94 = 0x80092F94; // defined:true

// Fake Function Fixing

fake_func_800027B8 = 0x800027B8; // defined:true
// Called after osContGetReadData in func_80002E10
// Probably something akin to `update_controller` from MK64
func_800027C0      = 0x800027C0; // defined:true

fake_func_8000337C = 0x8000337C; // defined:true
func_80003380      = 0x80003380; // defined:true

fake_func_80003424 = 0x80003424; // defined:true

func_80003480      = 0x80003480; // defined:true

// Annoyingly the fake function here, when interpreted as real coode, contains a reference
// to func_80007064 which isn't real. This causes a real function (func_8000703C) to get split in two
fake_func_8000537C = 0x8000537C; // defined:true
func_80005380      = 0x80005380; // defined:true

fake_func_80005568 = 0x80005568; // defined:true
func_80005570      = 0x80005570; // defined:true

fake_func_8000595C = 0x8000595C; // defined:true
func_80005960      = 0x80005960; // defined:true

fake_func_80006BFC = 0x80006BFC; // defined:true
func_80006C00      = 0x80006C00; // defined:true

fake_func_8000737C = 0x8000737C; // defined:true
func_80007380      = 0x80007380; // defined:true

fake_func_800074D8 = 0x800074D8; // defined:true
func_800074E0      = 0x800074E0; // defined:true

fake_func_80007908 = 0x80007908; // defined:true
func_80007910      = 0x80007910; // defined:true

fake_func_800186D8 = 0x800186D8; // defined:true

fake_func_80019808 = 0x80019808; // defined:true
func_80019810      = 0x80019810; // defined:true

fake_func_80024878 = 0x80024878; // defined:true
func_8001C400      = 0x8001C400; // defined:true

fake_func_8001C3FC = 0x8001C3FC; // defined:true
func_80024880      = 0x80024880; // defined:true

fake_func_80024A0C = 0x80024A0C; // defined:true
// No accompanying "real" function

fake_func_8003DF98 = 0x8003DF98; // defined:true
func_8003DFA0      = 0x8003DFA0; // defined:true

fake_func_8003E55C = 0x8003E55C; // defined:true
func_8003E560      = 0x8003E560; // defined:true

fake_func_80040304 = 0x80040304; // defined:true
func_80040310      = 0x80040310; // defined:true

fake_func_80041EEC = 0x80041EEC; // defined:true
func_80041EF0      = 0x80041EF0; // defined:true

fake_func_800457CC = 0x800457CC; // defined:true
func_800457D0      = 0x800457D0; // defined:true

fake_func_8004661C = 0x8004661C; // defined:true
func_80046620      = 0x80046620; // defined:true

fake_func_800496F4 = 0x800496F4; // defined:true
func_80049700      = 0x80049700; // defined:true

fake_func_8004CCF8 = 0x8004CCF8; // defined:true
func_8004CD00      = 0x8004CD00; // defined:true

fake_func_800538AC = 0x800538AC; // defined:true
func_800538B0      = 0x800538B0; // defined:true

fake_func_80054648 = 0x80054648; // defined:true
func_80054650      = 0x80054650; // defined:true

fake_func_800555E8 = 0x800555E8; // defined:true
func_800555F0      = 0x800555F0; // defined:true

fake_func_80055698 = 0x80055698; // defined:true
// real function is loadTxtFile

fake_func_80055A2C = 0x80055A2C; // defined:true
func_80055A30      = 0x80055A30; // defined:true

fake_func_80056344 = 0x80056344; // defined:true
func_80056350      = 0x80056350; // defined:true

fake_func_80059B4C = 0x80059B4C; // defined:true
func_80059B50      = 0x80059B50; // defined:true

fake_func_8005A11C = 0x8005A11C; // defined:true
func_8005A120      = 0x8005A120; // defined:true

fake_func_8005C61C = 0x8005C61C; // defined:true
func_8005C620      = 0x8005C620; // defined:true

fake_func_8005EE64 = 0x8005EE64; // defined:true
func_8005EE70      = 0x8005EE70; // defined:true

fake_func_800613B8 = 0x800613B8; // defined:true
func_800613C0      = 0x800613C0; // defined:true

fake_func_80064294 = 0x80064294; // defined:true
func_800642A0      = 0x800642A0; // defined:true

fake_func_80064934 = 0x80064934; // defined:true
// Accompanying real function is load_dat_file_assets

fake_func_80065A5C = 0x80065A5C; // defined:true
func_80065A60      = 0x80065A60; // defined:true

fake_func_800663AC = 0x800663AC; // defined:true
func_800663B0      = 0x800663B0; // defined:true

fake_func_80069AEC = 0x80069AEC; // defined:true
func_80069AF0      = 0x80069AF0; // defined:true

fake_func_8006ACA4 = 0x8006ACA4; // defined:true
func_8006ACB0      = 0x8006ACB0; // defined:true

// fake_func_8006AE48 = 0x8006AE48; // defined:true
func_8006AE58      = 0x8006AE58; // defined:true

fake_func_8006B704 = 0x8006B704; // defined:true
func_8006B710      = 0x8006B710; // defined:true

fake_func_8006D8FC = 0x8006D8FC; // defined:true
func_8006D900      = 0x8006D900; // defined:true

fake_func_8006F4AC = 0x8006F4AC; // defined:true
func_8006F4B0      = 0x8006F4B0; // defined:true

fake_func_80072CE8 = 0x80072CE8; // defined:true
func_80072CF0      = 0x80072CF0; // defined:true

fake_func_80079278 = 0x80079278; // defined:true
func_80079280      = 0x80079280; // defined:true

fake_func_80079CD8 = 0x80079CD8; // defined:true
func_80079CE0      = 0x80079CE0; // defined:true

fake_func_8007A0E8 = 0x8007A0E8; // defined:true
func_8007A0F0      = 0x8007A0F0; // defined:true

fake_func_8007A86C = 0x8007A86C; // defined:true
func_8007A870      = 0x8007A870; // defined:true

fake_func_8007C298 = 0x8007C298; // defined:true
func_8007C2A0      = 0x8007C2A0; // defined:true

fake_func_80082268 = 0x80082268; // defined:true
func_80082270      = 0x80082270; // defined:true

fake_func_800825C8 = 0x800825C8; // defined:true
// No accompanying "real" function

fake_func_80093E74 = 0x80093E74; // defined:true
func_80093E80      = 0x80093E80; // defined:true

fake_func_80094348 = 0x80094348; // defined:true
func_80094350      = 0x80094350; // defined:true

fake_func_8009711C = 0x8009711C; // defined:true
func_80097120      = 0x80097120; // defined:true

fake_func_80097D58 = 0x80097D58; // defined:true
func_80097D60      = 0x80097D60; // defined:true

fake_func_80099C4C = 0x80099C4C; // defined:true
func_80099C50      = 0x80099C50; // defined:true

fake_func_80099FDC = 0x80099FDC; // defined:true
// No accompanying "real" function

fake_func_8009D7CC = 0x8009D7CC; // defined:true
func_8009D7D0      = 0x8009D7D0; // defined:true

fake_func_8009C2C8 = 0x8009C2C8; // defined:true
func_8009C2D0      = 0x8009C2D0; // defined:true

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////// Variables ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

D_80000454 = 0x80000454; // type:f32 size:0x4
D_80000460 = 0x80000460; // type:f32 size:0x4
D_80000550 = 0x80000550; // type:f32
D_800005A0 = 0x800005A0; // type:f64
D_800007DC = 0x800007DC; // type:f32
D_800007E4 = 0x800007E4; // type:f32 size:0x4
D_80000808 = 0x80000808; // type:f32 size:0x4
D_80000984 = 0x80000984; // type:f32 size:0x4
D_800009F0 = 0x800009F0; // type:f32 size:0x4
D_80003470 = 0x80003470; // type:u32 size:0x4
D_800186E0 = 0x800186E0; // type:f32

gspF3DEXTextStart = 0x80024A10; // size:0x1FA0 name_end:gspF3DEXTextEnd
D_80037560        = 0x80037560; // size:0x50
D_800375B0        = 0x800375B0; // type:u32 size:0x4
D_80037620        = 0x80037620; // type:u32 size:0x4
D_80037630        = 0x80037630; // type:s32 size:0x4
gspTask           = 0x800377C8; // type:OSTask size:0x40
gspF3DEXDataStart = 0x80038D00; // size:0x100 name_end:gspF3DEXDataEnd
D_8003A4C4        = 0x8003A4C4; // type:f32 size:0x4
D_8003A604        = 0x8003A604; // type:f32 size:0x4
D_8003A7D8        = 0x8003A7D8; // type:f32 size:0x4
D_8003A810        = 0x8003A810; // type:f32 size:0x4
D_8003A8B4        = 0x8003A8B4; // type:f32 size:0x4
D_8003ABD0        = 0x8003ABD0; // type:f32 size:0x4
D_8003AD14        = 0x8003AD14; // type:f32 size:0x4
D_8003ADB8        = 0x8003ADB8; // type:f32 size:0x4
D_8003B2F4        = 0x8003B2F4; // type:f32 size:0x4
D_8003B828        = 0x8003B828; // type:f32 size:0x4
D_8003C2D0        = 0x8003C2D0; // type:f32 size:0x4
D_8003C7C4        = 0x8003C7C4; // type:f32 size:0x4
D_8003C8C4        = 0x8003C8C4; // type:f32 size:0x4
D_8003C8F8        = 0x8003C8F8; // type:f32 size:0x4
D_8003CAE4        = 0x8003CAE4; // type:f32 size:0x4
D_8003CEE0        = 0x8003CEE0; // type:f32 size:0x4
D_8003D4F4        = 0x8003D4F4; // type:f32 size:0x4
D_8003DE60        = 0x8003DE60; // type:f32 size:0x4
D_8003DEE0        = 0x8003DEE0; // type:f32 size:0x4
D_8003DEF0        = 0x8003DEF0; // type:f32 size:0x4
rspbootTextStart  = 0x800825D0; // size:0x0D0 name_end:rspbootTextEnd
aspMainTextStart  = 0x80099FE0; // size:0xF80 name_end:aspMainTextEnd
D_8009DEB4        = 0x8009DEB4; // type:f32 size:0x4
D_8009DEC0        = 0x8009DEC0; // type:s32 size:0x4
D_8009DED0        = 0x8009DED0; // type:s32 size:0x4
// type_size:0x08 count:0x61
D_8009FCD4        = 0x8009FCD4; // size:0x308
D_800A05C8        = 0x800A05C8; // size:0x4
D_800A0A64        = 0x800A0A64; // size:0x28
// type_size:0x08 count:0x29
D_800A0C1C        = 0x800A0C1C; // size:0x148

WedgesControllerSettings  = 0x8009DDD0; // type:u16 size:0x24
JansonsControllerSettings = 0x8009DDF4; // type:u16 size:0x24
LukesControllerSettings   = 0x8009DE18; // type:u16 size:0x24
HobbiesControllerSettings = 0x8009DE3C; // type:u16 size:0x24

D_8009DE60            = 0x8009DE60; // type:u32
D_8009EBD0            = 0x8009EBD0; // type:f32 size:0x10
D_8009EBE0            = 0x8009EBE0; // size:0x24
// type_size:0x04 count:0x13
dDefaultCraftForLevel = 0x8009EC50; // type:u32 size:0x4C
languageData          = 0x8009ECA0; // type:u32
D_8009ECA4            = 0x8009ECA4; // type:u32
languageStringOffsets = 0x8009ECA8; // type:u32 size:0x4

D_8009ED3C = 0x8009ED3C; // type:f32 size:0x1C
D_8009ED60 = 0x8009ED60; // type:f32 size:0x10

// I believe this is related to the various fonts found in the game
// The sizes are very strange, but I think they're correct
D_8009ED90 = 0x8009ED90; // type:u32 size:0x104
D_8009EE94 = 0x8009EE94; // type:u32 size:0x13C
D_8009EFD0 = 0x8009EFD0; // type:u32 size:0x104
D_8009F0D4 = 0x8009F0D4; // type:u32 size:0x13C
D_8009F210 = 0x8009F210; // type:u32 size:0x104
D_8009F314 = 0x8009F314; // type:u32 size:0x16C
D_8009F480 = 0x8009F480; // type:u32 size:0x138
D_8009F5B8 = 0x8009F5B8; // type:u32 size:0x138
D_8009F6F0 = 0x8009F6F0; // type:u32 size:0x138
D_8009F828 = 0x8009F828; // type:u32 size:0x138
D_8009F960 = 0x8009F960; // type:u32 size:0x15C
D_8009FABC = 0x8009FABC; // type:u32 size:0x154

D_8009FC40 = 0x8009FC40; // type:f32 size:0xC
D_8009FCB0 = 0x8009FCB0; // size:0x18

voiceIdtoTextIdMap = 0x8009FFE0; // type:u16 size:0x5E8

// type_size:0x30 count:0x15
D_800A05D0 = 0x800A05D0; // size:0x3F0
// type_size:0x28 count:0x04
D_800A09C0 = 0x800A09C0; // size:0xA0

D_800A0D70 = 0x800A0D70; // size:0x4
D_800A0D80 = 0x800A0D80; // type:f32 size:0x4

// type_size:0x3C count:0x05
D_800A0D9C = 0x800A0D9C; // type:u32 size:0x12C

gCheatCodeCrc32Table = 0x800A0ED0; // type:u32 size:0x74

D_800A0F44 = 0x800A0F44; // type:u8  size:0x3
D_800A0F58 = 0x800A0F58; // type:u16 size:0x800

D_800A1780 = 0x800A1780; // type:u32 size=0x4

D_800A1790 = 0x800A1790; // type:u16
D_800A1990 = 0x800A1990; // type:s32
D_800A2FD0 = 0x800A2FD0; // type:u32
D_800A31D0 = 0x800A31D0; // type:u32

D_800A33D0 = 0x800A33D0; // type:u32 size:0xC04
D_800A3FD4 = 0x800A3FD4; // type:u32 size:0xC04

D_800A4BD8 = 0x800A4BD8; // type:f32 size:0x200
D_800A4DD8 = 0x800A4DD8; // type:f32

aspMainDataStart          = 0x800A4E00; // size:0x320 name_end:aspMainDataEnd
speechSampleOffsetsLoaded = 0x800A5120; // type:u8  size:0x1
speechFileLoaded          = 0x800A5121; // type:u8  size:0x1

gIdleThread  = 0x8010D218; // type:OSThread size:0x1B0
gVideoThread = 0x8010D3D0; // type:OSThread size:0x1B0

D_8010D580 = 0x8010D580; // type:OSMesgQueue size:0x18
D_8010DFD0 = 0x8010DFD0; // type:OSMesg      size:0x4
D_8010DDA0 = 0x8010DDA0; // type:OSThread    size:0x1B0
D_8010DFD8 = 0x8010DFD8; // type:OSMesgQueue size:0x18
D_8010D598 = 0x8010D598; // type:OSMesg      size:0x4

D_8010FEE0           = 0x8010FEE0; // type:OSMesgQueue  size:0x18
rsViModeType         = 0x8010FF20; // type:u8
gControllerPads      = 0x8010FF30; // type:OSContPad    size:0x18
gSIEventMesgBuf      = 0x8010FF48; // type:OSMesg       size:0x4
D_8010FF50           = 0x8010FF50; // type:OSMesgQueue  size:0x18
D_8010FF68           = 0x8010FF68; // type:OSMesg       size:0x4
D_8010FF70           = 0x8010FF70; // type:OSThread     size:0x1B0
D_80110120           = 0x80110120; // type:u8           size:0x4
// Based on its usage in `func_80002C5C` it has to be an OSPfs array
// But OSPfs' only have a size of 0x68
// Potenially this is a larger struct that contains OPfs' as its first member?
// type_size:0x88 count:0x04
D_80110520           = 0x80110520; // size:0x220
// type_size:0x18 count:0x100
gSIEventMesgQueue    = 0x80110770; // type:OSMesgQueue  size:0x1800
gControllerStatuses  = 0x80110788; // type:OSContStatus size:0x10
gControllerBits      = 0x80110798; // type:u8           size:0x08
// type_size:0x04 count:0x08
D_801107A0           = 0x801107A0; // type:OSMesg       size:0x20
D_801107C0           = 0x801107C0; // type:OSMesgQueue  size:0x18
// type_size:0x18 count:0x08
D_801107E0           = 0x801107E0; // type:OSIoMesg     size:0xC0
// type_size:0x04 count:0x08
dmaSlotMesgBuffer    = 0x801108A0; // type:OSMesg       size:0x20
// type_size:0x18 count:0x08
dmaSlotMesgQueue     = 0x801108C0; // type:OSMesgQueue  size:0xC0
D_80110980           = 0x80110980; // type:OSMesg       size:0x04
D_80110990           = 0x80110990; // type:OSMesgQueue  size:0x18
nextOpenDmaSlot      = 0x801109A8; // type:s32
dmaSlotsAvailable    = 0x801109AC; // type:s32
// type_size:0x04 count:0x08
dmaSlotDestAddr      = 0x801109B0; // type:u32          size:0x20
// type_size:0x04 count:0x08
dmaSlotTotalTxSize   = 0x801109D0; // type:u32          size:0x20
// type_size:0x04 count:0x08
dmaSlotSrcAddr       = 0x801109F0; // type:u32          size:0x20
// type_size:0x04 count:0x08
dmaSlotTxSoFar       = 0x80110A10; // type:u32          size:0x20
// type_size:0x04 count:0x08
dmaSlotTxRemaning    = 0x80110A30; // type:u32          size:0x20
// type_size:0x04 count:0x08
dmaSlotTxThisStep    = 0x80110A50; // type:u32          size:0x20
dmaSlotMutex         = 0x80110A70; // type:u8
// type_size:0x50 count:0x04
D_80110A80           = 0x80110A80; //                   size:0x140
// type_size:0x18 count:0x10
D_80110BC0           = 0x80110BC0; //                   size:0x180
// type_size:0x74 count:0x08
D_80110D60           = 0x80110D60; //                   size:0x3A0
// type_size:0x18 count:0x08
D_80111100           = 0x80111100; //                   size:0x140
D_80111240           = 0x80111240; //                   size:0x04
dmaSlotMaxTxStepSize = 0x80111254; // type:u32
D_80111288           = 0x80111288; // type:OSMesg       size:0x04
D_80111290           = 0x80111290; // type:OSMesgQueue  size:0x18
// type_size:0x14 count:0x100
D_801112B0           = 0x801112B0; //                   size:0x1400
D_80112AE0           = 0x80112AE0; // type:OSMesg       size:0x04

D_801128D0   = 0x801128D0; // type:u32
D_801128D4   = 0x801128D4; // type:u32
D_801128D8   = 0x801128D8; // type:u16
D_801132C0   = 0x801132C0; // size:0x1000
D_8011A420   = 0x8011A420; // type:OSMesgQueue size:0x18
D_8011A7E8   = 0x8011A7E8; // type:OSMesgQueue size:0x18
D_8011A8D0   = 0x8011A8D0; // type:OSMesg      size:0x4

D_80128C80 = 0x80128C80; // type:OSMesg size:0x4
D_80128CE0 = 0x80128CE0; // type:OSMesg size:0x4

D_80130B10   = 0x80130B10; // size:0x28
D_80130B40   = 0x80130B40; // size:0x30
missionStats = 0x80130B78; // size:0x10
gPlayers     = 0x80137DB8; // size:0x2A0

gObjectiveCounts   = 0x80138060; // type:u32
gObjectiveBooleans = 0x801388A0; // type:u8

txtFileHeader          = 0x80138E60; // size:0x1C
languageStringcount    = 0x80138E7C; // type:u32
voiceTxtLanguageOffset = 0x80138E80; // type:u32
voiceTxtString         = 0x80138E90; // size:0x4

// type_size:0x0C count:0x60
hobObjectListItems  = 0x80139020; //          size:0x480
numHobObjectsLoaded = 0x801394A0; // type:u16
hobObjectHashMap    = 0x801394B0; // type:u16 size:0x32
// type_size:0x01 count:0x60
D_801394F0          = 0x801394F0; // type:u8  size:0x60

// Referencing indices in subtitleSlots, not sure what the purpose is though
D_80139B80 = 0x80139B80; // type:u32 size:0x20
D_80139BA0 = 0x80139BA0; // type:u8  size:0x08

// type_size:0x0C count:0x10
subtitleSlots          = 0x80139BB0; //         size:0xC0
subtitleSlotHead       = 0x80139C70; // type:u8 size:0x01
subtitleSlotTail       = 0x80139C71; // type:u8 size:0x01
subtitleSlotsAvailable = 0x80139C72; // type:u8 size:0x01

// Some kind of reference to the next slot in D_80139B80 to use
D_80139C73 = 0x80139C73; // size:0x01
D_8013A498 = 0x8013A498; // type:u8  size:0x80

gUnlockString = 0x8013A570; // type:u8 size:0x40

aspTask    = 0x80149470; // type:OSTask size:0x40
D_80153420 = 0x80153420; // size:0x1228

numSpeechSamples    = 0x80154670; // size:0x4
speechSampleOffsets = 0x8015467C; // size:0x4
speechFile          = 0x80154684; // size:0x4

////////////////////////////////////////////////////////////////////////////////
///////////////////////////////// Jump Tables //////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

jtbl_80000480 = 0x80000480; // type:jtbl
jtbl_80000500 = 0x80000500; // type:jtbl
jtbl_800008B8 = 0x800008B8; // type:jtbl
jtbl_80000990 = 0x80000990; // type:jtbl
jtbl_8003C140 = 0x8003C140; // type:jtbl size:0x118
jtbl_8003C920 = 0x8003C920; // type:jtbl size:0x34

////////////////////////////////////////////////////////////////////////////////
///////////////////////////// File Split Garbage ///////////////////////////////
////////////////////////////////////////////////////////////////////////////////

junk_8003B40C = 0x8003B40C; // type:u8
junk_800A1784 = 0x800A1784; // type:u8
junk_800A5122 = 0x800A5122; // type:u8
