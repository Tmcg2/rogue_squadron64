//////// Jump Tables ////////

__osIntTable = 0x8003A140; // type:jtbl
jtbl_8003A190 = 0x8003A190; // type:jtbl
// _Printf
jtbl_8003A2A4 = 0x8003A2A4; // type:jtbl

//////// Jump Table Labels ////////
// __osIntTable
redispatch = 0x8002BAB8; //type:jtbl_label
sw1 = 0x8002BA80; //type:jtbl_label
sw2 = 0x8002BA60; //type:jtbl_label
rcp = 0x8002B8C4; //type:jtbl_label
cart = 0x8002B870; //type:jtbl_label
prenmi = 0x8002BA04; //type:jtbl_label
IP6_Hdlr = 0x8002B838; //type:jtbl_label
IP7_Hdlr = 0x8002B844; //type:jtbl_label
counter = 0x8002B850; //type:jtbl_label

//////// Variables ////////

__osIntOffTable = 0x8003A120; // type:u8 size:0x20

__motorstartbuf = 0x8012E500; // type:u8 size:0x20
_motorstopbuf = 0x8012E4E0; // type:u8 size:0x20
_MotorStartData = 0x8012E3E0; // type:OSPifRam size:0x100
_MotorStopData = 0x8012E2E0; // type:OSPifRam size:0x100

__osActiveQueue = 0x8003918C; // type:OSThread*
__osBaseCounter = 0x8012F8D8; // type:u32
__osBaseTimer = 0x8012F8B0; // type:OSTimer size:0x20
__osContinitialized = 0x800390D0; // type:u32
// Called `_osLastSentSiCmd` in mk64's libultra
__osContLastCmd = 0x8012D050; // type:u8
__osContPifRam = 0x8012D010; // type:OSPifRam size:0x40
__osCurrentHandle = 0x80039150; // type:OSPiHandle* size:0x8
__osCurrentTime = 0x8012F8D0; // type:OSTime size:0x8
__osDiskHandle = 0x8012E2D4; // type:OSPiHandle* size:0x4
__osEepPifRam = 0x8012CFD0; // type:OSPifRam size:0x40
__osEepromTimer = 0x8012D058; // type:OSTimer size:0x20
__osEepromTimerQ = 0x8012D078; // type:OSMesgQueue size:0x18
__osEepromTimerMsg = 0x8012D090; // type:OSMesg size:0x4
// Should really be __OSEventState, but splat doesn't like that :(
__osEventStateTab = 0x8012F7D0; // type:OSEventState size:0x7C
__osFaultedThread = 0x80039194; // type:OSThread*
__osFinalrom = 0x8012D0A0; // type:u32
// volatile u32
__OSGlobalIntMask = 0x80039110;
// s32 (*__osHwIntTable[5])(void)
__osHwIntTable = 0x800390E0; // type:u32 size:0x14
__osMaxControllers = 0x8012D051; // type:u8
__osMotorinitialized = 0x80039120; // type:u32 size:0x10
__osPfsPifRam = 0x8012E520; // type:OSPifRam size:0x40
__osPiDevMgr = 0x80039130; // type:OSDevMgr size:0x1C
__osPiTable = 0x8003914C; // type:OSPiHandle_s* size:0x4
__osRcpImTable = 0x8003A1B0; // type:u16 size:0x80
__osRunningThread = 0x80039190; // type:OSThread*
__osRunQueue = 0x80039188; // type:OSThread*
__osShutdown = 0x8003910C; // type:u32
__osThreadSave = 0x8012D0B0; // type:OSThread size:0x1B0
__osThreadTail = 0x80039180; // type:OSThreadTail
__osTimerCounter = 0x8012F8E0; // type:u32
__osTimerList = 0x800391A0; // type:OSTimer* size:0x4
__osViCurr = 0x80039210; // type:OSViContext*
__osViNext = 0x80039214; // type:OSViContext*
__osViIntrCount = 0x8012F8DC; // type:u32
// Called `__osViMesgQueue` in MK64
viEventQueue = 0x80130AA0; // type:OSMesgQueue size:0x18

CartRomHandle = 0x8012F730; // type:OSPiHandle size:0x74

// cosf
P = 0x8003A0D0; // type:u64 size:40 allow_duplicated:True
rpi = 0x8003A0F8; // type:u64 allow_duplicated:True
pihi = 0x8003A100; // type:u64 allow_duplicated:True
pilo = 0x8003A108; // type:u64 allow_duplicated:True
zero = 0x8003A110; // type:f32 allow_duplicated:True

// sinf
P = 0x8003A230; // type:u64 size:40 allow_duplicated:True
rpi = 0x8003A258; // type:u64 allow_duplicated:True
pihi = 0x8003A260; // type:u64 allow_duplicated:True
pilo = 0x8003A268; // type:u64 allow_duplicated:True
zero = 0x8003A270; // type:f32 allow_duplicated:True

__libm_qnan_f = 0x8003A170; // type:f32

// Static variable in `sptask`
tmp_task = 0x8012F870; // type:OSTask size:0x40

// Static variable in `aisetnextbuf`
hdwrBugFlag = 0x800390C0; // type:u8

// Called `gOsPiAccessQueueCreated` in MK64
__osPiAccessQueueEnabled = 0x80039160; // type:u32
// Called `osPiMesgBuff` in MK64
piAccessBuf = 0x8012F7B0; // type:OSMesg size:0x4
// Called `gOsPiMessageQueue` in MK64
__osPiAccessQueue = 0x8012F7B8; // type:OSMesgQueue size:0x18

// Called `gOsSiAccessQueueCreated` in MK64
__osSiAccessQueueEnabled = 0x80039170; // type:u32
// Called `osSiMesgBuff` in MK64
siAccessBuf = 0x8012F850; // type:OSMesg size:0x4
// Called `gOsSiMessageQueue` in MK64
__osSiAccessQueue = 0x8012F858; // type:OSMesgQueue size:0x18

// Called `sViContexts` in MK64
vi = 0x800391B0; // type:OSViContext size:0x60

 // s32[]
osAppNMIBuffer = 0x8000031C; // type:s32 size:0x40
osClockRate = 0x80039100; // type:u64
osResetType = 0x8000030C; // type:s32
osRomBase = 0x80000308; // type:u32
osTvType = 0x80000300; // type:u32
osViClock = 0x80039108; // type:u32
osViModeTable = 0x80039330; // type:OSViMode[42] size:0xD20
osViModePalLan1 = 0x800392E0; // type:OSViMode size:0x50
osViModeMpalLan1 = 0x80039240; // type:OSViMode size:0x50
osViModeNtscLan1 = 0x80039290; // type:OSViMode size:0x50

LeoDiskHandle = 0x8012E260; // type:OSPiHandle size:0x74
leoDiskStack = 0x8012D260; // type:u8 size:0x1000
// Called `__osPiMesgQueue` in MK64
piEventQueue = 0x8012F710; // type:OSMesgQueue size:0x18
// Called `piMgrMesgBuff` in MK64
piEventBuf = 0x8012F728; // type:OSMesg size=0x4
piThreadStack = 0x8012E710; // type:char size=0x1000
piThread = 0x8012E560; // type:OSThread size:0x1B0
// Called `viEventCounterMesg` in MK64
viCounterMsg = 0x80130AE8; // type:OSIoMesg size:0x18
// Called `viEventViMesg` in MK64
viRetraceMsg = 0x80130AD0; // type:OSIoMesg size:0x18
// Called `viMgrMainArgs` in MK64
__osViDevMgr = 0x80039220; // type:OSDevMgr size:0x1C
// Called `viMgrMesgBuff` in MK64
viEventBuf = 0x80130AB8; // type:OSMesg size:0x14
// Called `viMgrStack` in MK64
viThreadStack = 0x8012FAA0; // type:u8 size:0x1000
// Called `viMgrThread` in MK64
viThread = 0x8012F8F0; // type:OSThread size:0x1B0
// Static variable in `viMgrMain`
retrace = 0x80130B00; // type:u16

// Static variables in `xlitob`
ldigs = 0x8003A0A0; // type:asciz
udigs = 0x8003A0B4; // type:asciz

// Static variables in `xprintf`
spaces = 0x8003A050; // type:asciz
zeroes = 0x8003A074; // type:asciz

// Static const variables in `_Printf`
fchar = 0x8003A284; // type:asciz
fbit = 0x8003A28C; // type:s32

// Static const varaible in xldtob
pows = 0x8003A380; // type:f64 size:0x48

D_80137DB8 = 0x80137DB8; // size:0x2A0

// Unknown type
D_801132C0 = 0x801132C0; // size:0x1000

gCheatCodeCrc32Table = 0x800A0ED0; // type:u32 size:0x74

gCurrentLevel = 0x80130B70; // type:u32 size:0x4

dDefaultCraftForLevel = 0x8009EC50; // type:u32 size:0x4C

D_80130B40 = 0x80130B40; // size:0x2C

D_80109CB0 = 0x80109CB0; // type:char* size:0x24

D_800007D0 = 0x800007D0; // type:asciz segment:main
D_800009F8 = 0x800009F8; // type:asciz segment:main
D_80000A3C = 0x80000A3C; // type:asciz segment:main
D_8003A8C0 = 0x8003A8C0; // type:asciz segment:main
D_8003AF60 = 0x8003AF60; // type:asciz segment:main
D_8003B404 = 0x8003B404; // type:asciz segment:main
D_8003B488 = 0x8003B488; // type:asciz segment:main
D_8003B4DC = 0x8003B4DC; // type:asciz segment:main
D_8003B514 = 0x8003B514; // type:asciz segment:main
D_8003B588 = 0x8003B588; // type:asciz segment:main
D_8003B5D4 = 0x8003B5D4; // type:asciz segment:main
D_8003B618 = 0x8003B618; // type:asciz segment:main
D_8003B65C = 0x8003B65C; // type:asciz segment:main
D_8003B7DC = 0x8003B7DC; // type:asciz segment:main
D_8003C2E0 = 0x8003C2E0; // type:asciz segment:main
D_8003C790 = 0x8003C790; // type:asciz segment:main
D_8003C9B0 = 0x8003C9B0; // type:asciz segment:main
D_8003CB10 = 0x8003CB10; // type:asciz segment:main
D_8003CBCC = 0x8003CBCC; // type:asciz segment:main
D_8003CCD4 = 0x8003CCD4; // type:asciz segment:main
D_8003D624 = 0x8003D624; // type:asciz segment:main
D_8003D63C = 0x8003D63C; // type:asciz segment:main

D_800A5140 = 0x800A5140; // type:asciz segment:menu_overlay allow_duplicated:True
D_800A5150 = 0x800A5150; // type:asciz segment:menu_overlay
D_800A5B14 = 0x800A5B14; // type:asciz segment:menu_overlay
D_800A5C50 = 0x800A5C50; // type:asciz segment:menu_overlay
D_800A5CC8 = 0x800A5CC8; // type:asciz segment:menu_overlay
D_800A5CEC = 0x800A5CEC; // type:asciz segment:menu_overlay
D_800A5D38 = 0x800A5D38; // type:asciz segment:menu_overlay
D_800A5DD0 = 0x800A5DD0; // type:asciz segment:menu_overlay
D_800A5FD8 = 0x800A5FD8; // type:asciz segment:menu_overlay
D_800A762C = 0x800A762C; // type:asciz segment:menu_overlay

D_800A5820 = 0x800A5820; // type:asciz segment:mission_overlay
D_800A5990 = 0x800A5990; // type:asciz segment:mission_overlay
D_800A5B20 = 0x800A5B20; // type:asciz segment:mission_overlay
D_800A5C20 = 0x800A5C20; // type:asciz segment:mission_overlay
D_800A5E00 = 0x800A5E00; // type:asciz segment:mission_overlay
D_800A5FE0 = 0x800A5FE0; // type:asciz segment:mission_overlay
D_800A60D0 = 0x800A60D0; // type:asciz segment:mission_overlay
D_800A61E0 = 0x800A61E0; // type:asciz segment:mission_overlay
D_800A6250 = 0x800A6250; // type:asciz segment:mission_overlay
D_800A6880 = 0x800A6880; // type:asciz segment:mission_overlay
D_800A6D10 = 0x800A6D10; // type:asciz segment:mission_overlay
D_800A7DE0 = 0x800A7DE0; // type:asciz segment:mission_overlay
D_800A8290 = 0x800A8290; // type:asciz segment:mission_overlay

D_800A5140 = 0x800A5140; // type:asciz segment:cinematic_overlay allow_duplicated:True
D_800A517C = 0x800A517C; // type:asciz segment:cinematic_overlay
D_800A5300 = 0x800A5300; // type:asciz segment:cinematic_overlay
D_800A5984 = 0x800A5984; // type:asciz segment:cinematic_overlay
D_800A5994 = 0x800A5994; // type:asciz segment:cinematic_overlay
D_800A59A4 = 0x800A59A4; // type:asciz segment:cinematic_overlay

//////// Functions ////////

bcmp = 0x80029F60; // type:func
bcopy = 0x80034010; // type:func
bzero = 0x8002A080; // type:func
corrupted = 0x800315B8; // type:func
corrupted_init = 0x80031404; // type:func
cosf = 0x8002B190; // type:func
sinf = 0x80033960; // type:func
memcpy = 0x800346F0; // type:func
proutSprintf = 0x80033CA0; // type:func
sprintf = 0x80033CC4; // type:func
strlen = 0x8003471C; // type:func
strchr = 0x80034744; // type:func
_Printf = 0x80035FD0; // type:func
_Putfld = 0x80035960; // type:func
// There should be _Ldunscale somehwere near here, but
// I our version of libultra I guess its inlined/not a separate function?
_Genld = 0x80036620; // type:func
viMgrMain = 0x80034F38; // type:func

_Ldtob = 0x80036B90; // type:func
_Litob = 0x80037270; // type:func
_MakeMotorData = 0x8002D710; // type:func

guMtxCatL = 0x8002E410; // type:func
guMtxCatF = 0x8002E510; // type:func
guMtxF2L = 0x8002E680; // type:func
guMtxIdent = 0x8002E808; // type:func
guMtxIdentF = 0x8002E780; // type:func
guMtxL2F = 0x8002E838; // type:func
guMtxXFMF = 0x8002E470; // type:func
guMtxXFML = 0x8002E3B0; // type:func
guPerspective = 0x8002EB80; // type:func
guPerspectiveF = 0x8002E950; // type:func
guScale = 0x800333C4; // type:func
guScaleF = 0x80033370; // type:func

osAiSetFrequency = 0x80029D20; // type:func
osAiSetNextBuffer = 0x80029E80; // type:func
osCartRomInit = 0x800326F0; // type:func
osContGetQuery = 0x8002AC04; // type:func
osContGetReadData = 0x8002ACBC; // type:func
osContInit = 0x8002AE50; // type:func
osContStartQuery = 0x8002AB80; // type:func
osContStartReadData = 0x8002AC30; // type:func
osCreateMesgQueue = 0x8002B300; // type:func
osCreatePiManager = 0x80032560; // type:func
osCreateThread = 0x8002B330; // type:func
osCreateViManager = 0x80034DB0; // type:func
osDestroyThread = 0x8002B480; // type:func
osDpGetCounters = 0x8002B590; // type:func
osDpSetStatus = 0x8002B5E0; // type:func
osEepromLongRead = 0x8002A120; // type:func
osEepromLongWrite = 0x8002A1B0; // type:func
osEepromProbe = 0x8002A2A0; // type:func
osEepromRead = 0x8002A340; // type:func
osEepromWrite = 0x8002A660; // type:func
osEPiRawStartDma = 0x8002CD80; // type:func
osGetCount = 0x8002BF90; // type:func
osGetThreadPri = 0x80032FB0; // type:func
osGetTime = 0x8002BF00; // type:func
osInitialize = 0x8002BFA0; // type:func
osInvalDCache = 0x8002C280; // type:func
osInvalICache = 0x8002C330; // type:func
osJamMesg = 0x8002C3B0; // type:func
osLeoDiskInit = 0x8002CFB0; // type:func
osMapTLBRdb = 0x8002D370; // type:func
osMotorInit = 0x8002D88C; // type:func
osMotorStart = 0x8002D570; // type:func
osMotorStop = 0x8002D3D0; // type:func
osPfsAllocateFile = 0x8002EBE0; // type:func
osPfsChecker = 0x80030D40; // type:func
osPfsDeleteFile = 0x800300F0; // type:func
osPfsFindFile = 0x80032260; // type:func
osPfsFreeBlocks = 0x80030710; // type:func
osPfsInitPak = 0x80030AA0; // type:func
osPfsIsPlug = 0x800317A0; // type:func
osPfsReadWriteFile = 0x80031BDC; // type:func
osPfsRepairId = 0x80032000; // type:func
osPiGetCmdQueue = 0x80032530; // type:func
osPiRawReadIo = 0x80033170; // type:func
osPiRawStartDma = 0x80033090; // type:func
osPiStartDma = 0x80032420; // type:func
osRecvMesg = 0x800331D0; //type:func
osSendMesg = 0x80033410; // type:func
osSetEventMesg = 0x80033560; // type:func
osSetIntMask = 0x80033630; // type:func
osSetTimer = 0x800337C0; // type:func
osSetThreadPri = 0x800336E0; // type:func
osSpTaskLoad = 0x80033E3C; // type:func
osSpTaskStartGo = 0x80033FCC; // type:func
osSpTaskYield = 0x80034430; // type:func
osSpTaskYielded = 0x80034450; // type:func
osStartThread = 0x800344E0; // type:func
osStopThread = 0x80034630; // type:func
osVirtualToPhysical = 0x80035120; // type:func
osViBlack = 0x80034BE0; // type:func
osViGetCurrentField = 0x80034D90; // type:func
osViSetEvent = 0x80035260; // type:func
osViSetMode = 0x800352D0; // type:func
osViSetSpecialFeatures = 0x80035340; // type:func
osViSwapBuffer = 0x80035500; // type:func
osWritebackDCache = 0x800358B0; // type:func
osWritebackDCacheAll = 0x80035930; // type:func
osYieldThread = 0x80037510; // type:func

_VirtualToPhysicalTask = 0x80033D20; // type:func

__osAiDeviceBusy = 0x80029F30; // type:func
__osBlockSum = 0x80030618; // type:func
__osCleanupThread = 0x8002BEF0; // type:func
__osCheckId = 0x8002FC60; // type:func
__osCheckPackId = 0x8002F86C; // type:func
__osClearPage = 0x8002F2C8; // type:func
__osContAddressCrc = 0x8002E230; // type:func
__osContDataCrc = 0x8002E2E0; // type:func
__osContGetInitData = 0x8002AFC0; // type:func
__osContRamRead = 0x8002DB70; // type:func
__osContRamWrite = 0x8002DED0; // type:func
__osDequeueThread = 0x80034790; // type:func
__osDevMgrMain = 0x800327F0; // type:func
__osDisableInt = 0x8002C240; // type:func
__osDispatchThread = 0x8002BD74; // type:func
__osEepStatus = 0x8002A958; // type:func
__osEnqueueAndYield = 0x8002BC1C; // type:func
__osEnqueueThread = 0x8002BD1C; // type:func
__osEPiRawWriteIo = 0x80032E20; // type:func
__osEPiRawReadIo = 0x80032C80; // type:func
__osException = 0x8002B600; // type:func
__osExceptionPreamble = 0x8002B5F0; // type:func
__osGetId = 0x8002FA04; // type:func
__osGetSR = 0x8002C230; // type:func
__osIdCheckSum = 0x8002F3EC; //type:func
__osInsertTimer = 0x80034A48; // type:func
__osLeoAbnormalResume = 0x8002CBA4; // type:func
__osLeoInterrupt = 0x8002C500; // type:func
__osLeoResume = 0x8002CC8C; // type:func
__osPackEepReadData = 0x8002A55C; // type:func
__osPackEepWriteData = 0x8002A84C; // type:func
__osPackRamReadData = 0x8002DD8C; // type:func
__osPackRamWriteData = 0x8002E0D4; // type:func
__osPackReadData = 0x8002AD64; // type:func
__osPackRequestData = 0x8002B090; // type:func
__osPfsDeclarePage = 0x8002F064; // type:func
__osPfsGetInitData = 0x80031A10; // type:func
__osPfsGetNextPage = 0x80031AE0; // type:func
__osPfsGetOneChannelData = 0x80030A04; // type:func
__osPfsGetStatus = 0x80030860; // type:func
__osPfsReleasePages = 0x800303D0; // type:func
__osPfsRequestData = 0x80031940; // type:func
__osPfsRequestOneChannel = 0x80030944; // type:func
__osPfsRWInode = 0x8002FD5C; // type:func
__osPfsSelectBank = 0x8003007C; // type:func
__osPiCreateAccessQueue = 0x80032FD0; // type:func
__osPiGetAccess = 0x80033020; // type:func
__osPiRelAccess = 0x80033064; // type:func
__osPopThread = 0x8002BD64; // type:func
__osProbeTLB = 0x800351A0; // type:func
__osRepairPackId = 0x8002F454; // type:func
__osResetGlobalIntMask = 0x80033310; // type:func
__osRestoreInt = 0x8002C260; // type:func
__osSetCompare = 0x80034BD0; // type:func
__osSetFpcCsr = 0x800335D0; // type:func
__osSetGlobalIntMask = 0x800335E0; // type:func
__osSetSR = 0x800336D0; // type:func
__osSetTimerIntr = 0x800349D4; // type:func
__osSiCreateAccessQueue = 0x800338A0; // type:func
__osSiDeviceBusy = 0x80033BD0; // type:func
__osSiGetAccess = 0x800338F0; // type:func
__osSiRawReadIo = 0x80033C00; // type:func
__osSiRawStartDma = 0x80033B20; // type:func
__osSiRawWriteIo = 0x80033C50; // type:func
__osSiRelAccess = 0x80033934; // type:func
__osSpDeviceBusy = 0x80034320; // type:func
__osSpGetStatus = 0x800344D0; // type:func
__osSpRawStartDma = 0x80034350; // type:func
__osSpSetPc = 0x800343E0; // type:func
__osSpSetStatus = 0x80034420; // type:func
__osSumcalc = 0x8002F390; // type:func
__osTimerInterrupt = 0x8003485C; // type:func
__osTimerServicesInit = 0x800347D0; // type:func
__osViGetCurrentContext = 0x80035110; // type:func
__osViInit = 0x80034C50; // type:func
__osViSwapContext = 0x80035550; // type:func

lldiv = 0x800370E0; // type:func
ldiv = 0x800371E0; // type:func

__ll_div = 0x8002D1BC; // type:func
__ll_lshift = 0x8002D154; // type:func
__ll_mod = 0x8002D2A8; // type:func
__ll_mul = 0x8002D218; // type:func
__ll_rem = 0x8002D180; // type:func
__ll_rshift = 0x8002D344; // type:func
__ull_div = 0x8002D118; // type:func
__ull_divremi = 0x8002D248; // type:func
__ull_rem = 0x8002D0DC; // type:func
__ull_rshift = 0x8002D0B0; // type:func

rs_strcpy  = 0x8000761C; // type:func
rs_strncpy = 0x80007640; // type:func
rs_strcat  = 0x8000767C; // type:func
rs_strncat = 0x800076B8; // type:func
rs_strcmp  = 0x800076F8; // type:func
rs_strncmp = 0x800077A8; // type:func
rs_memset  = 0x800078E0; // type:func

rs_malloc = 0x80001ACC; // type:func
rs_free = 0x80001C98; // type:func

make_crc32_lut = 0x80082544; // type:func
rs_crc32 = 0x800824F8; // type:func

// Return value is used to set member at 0x18 in D_80111100 entries
find_manifest_entry = 0x80003A0C; // type:func
decrypt_ns_hmt = 0x8006AFC0; // type:func

getPlayerHealthPercentage = 0x800C40AC; // type:func

getGameOrFrontText = 0x8005589C; // type:func
getControllerSettingsTitle = 0x800C49BC; // type:func

//////// Main Stuff ////////
// All threads appear to have a thread ID of 0
// Seemingly thread ID is only used by the debugger, so this may not be a big deal

// Appears to be some sort of memory zero'ing function? 
// Handwritten (uses `cache` intstruction), directly below entry_point in memory
// Might be responsible for zero'ing out BSS? If that guess is right, D_8010D200 is the start of BSS
func_8000040C = 0x8000040C; // type:func

// Jumped to by entry_point
main = 0x8000161C; // type:func
gIdleThread = 0x8010D218; // type:OSThread size:0x1B0
// D_8010FED8 is the end(?) of the idle thread stack, I think

// gIdleThread's handler
thread1_idle = 0x800017A0; // type:func
gVideoThread = 0x8010D3D0; // type:OSThread size:0x1B0
// D_801163B0 is the end(?) of the video thread stack, I think

// gVideoThread's handler
thread3_video = 0x80001088; // type:func
D_8010D580 = 0x8010D580; // type:OSMesgQueue size:0x18
D_8010DFD0 = 0x8010DFD0; // type:OSMesg size:0x4
D_8010DDA0 = 0x8010DDA0; // type:OSThread size:0x1B0


// D_8010DDA0's handler
// Sets up a event handler for the Pre NMI interrupt
// It appears to handle setting the ViMode
func_800016AC = 0x800016AC; // type:func
D_8010DFD8 = 0x8010DFD8; // type:OSMesgQueue size:0x18
D_8010D598 = 0x8010D598; // type:OSMesg size:0x4

// Empty function?
func_80004FD0 = 0x80004FD0; // type:func

// Initialized the motor by the looks of it
func_80002C5C = 0x80002C5C; // type:func
gSIEventMesgQueue = 0x80110770; // type:OSMesgQueue size:0x18
// Based on its usage in `func_80002C5C` it has to be an OSPfs array
// But OSPfs' only have a size of 0x68
// ????? size = 0x88, x4
// Potenially this is a larger struct that contains OPfs' as its first member?
// Is also directly under the stack for D_8010FF70/func_80002E10
D_80110520 = 0x80110520; // size:0x220

func_80002F4C = 0x80002F4C; // type:func
D_8010FF70 = 0x8010FF70; // type:OSThread size:0x1B0
// D_8010FF70's stack, most likely
// D_80110120 = 0x80110120; // type:u8 size:0x400
// D_80110520 is the end of the stack

// D_8010FF70's handler
// Controller initialization at minimum
// Also does some reading of controller data
// Has a  while(1) loop in it
func_80002E10 = 0x80002E10; // type:func
gSIEventMesgBuf = 0x8010FF48; // type:OSMesg size:0x4
D_8010FF50 = 0x8010FF50; // type:OSMesgQueue size:0x18
D_8010FF68 = 0x8010FF68; // type:OSMesg size:0x4
gControllerStatuses = 0x80110788; // type:OSContStatus size:0x10
gControllerBits = 0x80110798; // type:u8 size:0x8
gControllerPads = 0x8010FF30; // type:OSContPad size:0x18

// Called after osContGetReadData in func_80002E10
// Probably something akin to `update_controller` from MK64
func_800027C0 = 0x800027C0; // type:func

func_800045E8 = 0x800045E8; // type:func
// 8 Messages
D_801107A0 = 0x801107A0; // type:OSMesg size:0x20
D_801107C0 = 0x801107C0; // type:OSMesgQueue size:0x18
// 8 Messages
D_801108A0 = 0x801108A0; // type:OSMesg size:0x20
// 8 Messages
D_801108C0 = 0x801108C0; // type:OSMesgQueue size:0xC0
D_80110980 = 0x80110980; // type:OSMesg size:0x4
D_80110990 = 0x80110990; // type:OSMesgQueue size:0x18

// a0 -> Source memory address (ROM, 0xB.......)
// a1 -> Destination memory address (RAM, 0x8.......)
// a2 -> DMA size
func_80003480 = 0x80003480; // type:func
// Array of 8 OSIoMesg?
D_801107E0 = 0x801107E0; // type:OSIoMesg size:0xC0

func_80005850 = 0x80005850; // type:func
D_80111288 = 0x80111288; // type:OSMesg size:0x4
D_80111290 = 0x80111290; // type:OSMesgQueue size:0x18

// Contains a while(1) loop
func_80005568 = 0x80005568; // type:func
// Unknown type of size 0x14, 256 entries total
D_801112B0 = 0x801112B0; // size:0x1400
// D_801126B0 seems related to it too
// D_801126B4 appears to be an index into this array

func_80019BF4 = 0x80019BF4; // type:func
D_8011A420 = 0x8011A420; // type:OSMesgQueue size:0x18
D_8011A8D0 = 0x8011A8D0; // type:OSMesg size:0x4

func_8001A058 = 0x8001A058; // type:func
D_80128C80 = 0x80128C80; // type:OSMesg size:0x4

func_8001C12C = 0x8001C12C; // type:func
D_80128CE0 = 0x80128CE0; // type:OSMesg size:0x4

D_80112AE0 = 0x80112AE0; // type:OSMesg size:0x4
D_8011A7E8 = 0x8011A7E8; // type:OSMesgQueue

// Individual size 0x18
D_80110BC0 = 0x80110BC0; // size:0x180

func_80003D64 = 0x80003D64; // type:func
// Unknown type of size 0x50 (4 entries)
D_80110A80 = 0x80110A80; // size:0x140

// Unknown type of size 0x74 (8 entries)
D_80110D60 = 0x80110D60; // size:0x3A0
// Index into D_80110D60
D_80111240 = 0x80111240; // size:0x4

func_80004AAC = 0x80004AAC; // type:func
// Unknown type of size 0x28 (8 entries)
D_80111100 = 0x80111100; // size:0x140

D_8010FEE0 = 0x8010FEE0; // type:OSMesgQueue size:0x18


//////// zlib stuff ////////

// zlib can't be later than 1.1.3 (9 July 1998)
// Or, I guess, it can't be a later tagged version

// On the one hand it can't be later than v0.95, but on another it can't be earlier than v0.99
// So wtf is up? Did they hack together a couple different versions, including pre-1.0?

//// inftrees ////
// .data
cplens = 0x80038E54; // type:u32 size:0x7C
cplext = 0x80038ED0; // type:u32 size:0x7C
cpdist = 0x80038F4C; // type:u32 size:0x78
cpdext = 0x80038FC4; // type:u32 size:0x78
fixed_built = 0x8003903C; // type:s32 size:0x4

// .bss
// type:inflate_huft 
fixed_mem = 0x8012BF30; // size:0x1090
fixed_bl = 0x8012CFC0; // type:u32 size:0x4
fixed_bd = 0x8012CFC4; // type:u32 size:0x4
// type:inflate_huft*
fixed_tl = 0x8012CFC8; // size:0x4
// type:inflate_huft*
fixed_td = 0x8012CFCC; // size:0x4

// .text
huft_build = 0x800290E0; // type:func
inflate_trees_bits = 0x800296A0; // type:func
inflate_trees_dynamic = 0x8002971C; // type:func
inflate_trees_fixed = 0x80029864; // type:func
// This function appears to be from v0.99 (or later) based on the inclusion of 2 `while` loops
inflate_trees_free = 0x80029A68; // type:func
falloc = 0x80029AE8; // type:func

//// infblock ////
// .data
border = 0x80038E00; // type:u32 size:0x4C

// .text
// inflate_blocks_reset is inline'd nearly everywhere its used
inflate_blocks_reset = 0x800275F0; // type:func
// This function appears to be from v1.0.8 (26 January 1998) (or earlier) based on some missing `if` statements
inflate_blocks_new = 0x800276C4; // type:func
inflate_blocks = 0x80027818; // type:func
inflate_blocks_free = 0x800283D8; // type:func
inflate_set_dictionary = 0x800284D4; // type:func

//// infutil ////
// .data
inflate_mask = 0x80039040; // type:u32 size:0x44

// .text
inflate_flush = 0x80029B20; // type:func

//// adler32 ////
// .text
adler32 = 0x800269B0; // type:func

//// inflate ////
// .text
// inflateReset and inflateEnd are also getting inline'd
inflateReset = 0x80026B98; // type:func
inflateEnd = 0x80026C04; // type:func
inflateInit2_ = 0x80026C7C; // type:func
inflateInit_ = 0x80026E7C; // type:func
inflate = 0x80026EA8; // type:func
inflateSetDictionary = 0x8002739C; // type:func
inflateSync = 0x80027468; // type:func

//// infcodes ////
// .text
inflate_codes_new = 0x80028520; // type:func
inflate_codes = 0x8002859C; // type:func
inflate_codes_free = 0x80028D2C; // type:func

//// inffast ////
// .text
inflate_fast = 0x80028D60; // type:func

//// zutil ////
// .text
// This isn't `zmemcpy` found in the zlib source, it appears to be a handwritten assembly function
zmemcpy = 0x80018EF4; // type:func
// These 2 functions appear to be from v0.95 (16 Aug 95) (or earlier), based on there being no `if(opaque)` checks
zcalloc = 0x80029CD0; // type:func
zcfree = 0x80029CF4; // type:func
